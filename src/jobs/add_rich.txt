!INS
    def chord_permutations(self, chord):
        board = self.chord_board(chord)
        positions = []
        for fret in range(1, self.n_frets - self.n_span + 1):
            string_frets = []
            valid = True
            for string in range(self.n_strings):
                string_frets.append([])
                if board[string, 0]:
                    string_frets[string].append(0)
                if (self.top_mute and string >= self.min_strings) \
                        or (self.bottom_mute and string < self.n_strings \
                        - self.min_strings):
                    string_frets[string].append(-1)
                if 1 in board[string, fret:fret + self.n_span]:
                    for k in range(fret, fret + self.n_span):
                        if board[string, k]:
                            string_frets[string].append(k)
                if not string_frets[string]:
                    valid = False
            if valid:
                for pose in self.expand_tree([], string_frets, 0, []):
                    if all([
                        len(pose[pose >= 0]) >= self.min_strings,
                        len(pose[pose > 0]) <= self.max_fingers,
                        self.legal_mute(pose),
                        self.chord_represented(pose, chord),
                        self.pose_not_in_positions(pose, positions)
                    ]):
                        positions.append(pose)
        inversions = self.inversion_sort(positions, chord)
        ^self.rich_sort(inversions)
        return inversions
        
        